#include <iostream>
#include <queue>

using namespace std;
void prN(int n) {
    cout << n << "\n";
}
int main() {
    // 덱을 구현하기.
    int n, x, cnt;
    queue<int> deque;
    string cmd;
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> cmd;
        if (cmd == "push_front") {  // 정수 x를 덱의 앞에 넣는다.
            cin >> x;
            deque.push(x);
            cnt = deque.size() - 1;
            for (int i = 0; i < cnt; i++) {
                deque.push(deque.front());
                deque.pop();
            }
        } else if (cmd == "push_back") {  // 정수 x를 덱의 뒤에 넣는다.
            cin >> x;
            deque.push(x);
        } else if (cmd == "pop_front") {  // 덱의 가장 앞에 있는 수를 빼고 출력. 비어있으면 -1 출력
            if (deque.empty())
                prN(-1);
            else {
                prN(deque.front());
                deque.pop();
            }
        } else if (cmd == "pop_back") {  // 덱의 가장 뒤에 있는 수를 빼고 출력. 비어있으면 -1 출력
            if (deque.empty())
                prN(-1);
            else {
                prN(deque.back());
                cnt = deque.size() - 1;
                for (int i = 0; i < cnt; i++) {
                    deque.push(deque.front());
                    deque.pop();
                }
                deque.pop();
            }
        } else if (cmd == "size") {  // 덱의 개수를 출력
            prN(deque.size());
        } else if (cmd == "empty") {  // 덱이 비어있으면 1, 아니면 0을 출력
            if (deque.empty())
                prN(1);
            else
                prN(0);
        } else if (cmd == "front") {  // 덱의 가장 앞에 있는 정수를 출력, 비어있으면 -1
            if (deque.empty())
                prN(-1);
            else
                prN(deque.front());

        } else if (cmd == "back") {  // 덱의 가장 뒤에 있는 정수를 출력, 비어있으면 -1
            if (deque.empty())
                prN(-1);
            else
                prN(deque.back());
        }
    }
}
