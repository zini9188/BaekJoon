#include <iostream>
using namespace std;

#define getSquare(x, y) (x / 3) * 3 + (y / 3)  // 사각형 영역 구하는 함수
int board[10][10];                             // 스도쿠 판
bool Col[10][10];                              // 세로
bool Row[10][10];                              // 가로
bool Square[10][10];                           // 사각형 영역
void print() {
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            cout << board[i][j] << " ";
        }
        cout << '\n';
    }
}
void dfs(int num) {
    if (num == 81) {  // 81개를 다 검사 후
        print();
        exit(0);
    }

    int x = num / 9;  // x좌표 구하는 식
    int y = num % 9;  // y좌표 구하는 식

    if (board[x][y] == 0) {             // 해당 좌표의 값이 0이면
        for (int i = 1; i <= 9; i++) {  // 숫자 1 ~ 9를 비교하여 백트래킹
            // 해당 행과 열, 사각형 영역에 1 ~ 9가 있으면 넘어가고 그렇지 않으면 백트래킹
            if (!Col[y][i] && !Row[x][i] && !Square[getSquare(x, y)][i]) {
                Row[x][i] = true;
                Col[y][i] = true;
                Square[getSquare(x, y)][i] = true;
                board[x][y] = i;
                dfs(num + 1);
                Row[x][i] = false;
                Col[y][i] = false;
                Square[getSquare(x, y)][i] = false;
                board[x][y] = 0;
            }
        }
    } else {  // 값이 있으면 다음 좌표로 넘어감
        dfs(num + 1);
    }
}

int main() {
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            cin >> board[i][j];
            // 0이 아닌 값이면 해당 좌표의 행,열,사각형 영역의 bool 값을 true로 변경
            if (board[i][j] != 0) {
                Col[j][board[i][j]] = true;
                Row[i][board[i][j]] = true;
                Square[getSquare(i, j)][board[i][j]] = true;
            }
        }
    }

    dfs(0);
}
